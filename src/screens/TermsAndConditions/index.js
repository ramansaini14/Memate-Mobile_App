/* eslint-disable react-native/no-inline-styles */
import {SafeAreaView, ScrollView, StyleSheet, Text, View} from 'react-native';
import React, {useEffect, useState} from 'react';
import {TouchableOpacity, TextInput} from 'react-native';
import {appColors} from '../../utils/appColors';
import BackIcon from '../../assets/svg/BackIcon';
import {useDispatch, useSelector} from 'react-redux';
import {hitAppTerms} from '../../redux/GetAppTermsSlice';
import {
  clearAcceptDeclineTerms,
  hitAcceptDeclineTerms,
} from '../../redux/AcceptDeclineTermSlice';
import AsyncStorage from '@react-native-async-storage/async-storage';
import RenderHtml from 'react-native-render-html';
import {useWindowDimensions} from 'react-native';

const TermsAndConditions = ({navigation, route}) => {
  const {from, id} = route.params;
  const dispatch = useDispatch();
  const responseTerms = useSelector(state => state.getAppTermsReducer.data);

  const {width} = useWindowDimensions();

  const responseAcceptDecline = useSelector(
    state => state.acceptDeclineTermsReducer.data,
  );

  const [terms, setTerms] = useState(null);

  const handleClick = () => {
    navigation.reset({
      index: 0,
      routes: [{name: 'ChooseOrganization'}],
    });
  };

  useEffect(() => {
    if(from == 'org') {
    const payload = {
      orgId: id,
    };
    dispatch(hitAppTerms(payload));
  }else {
    setTerms(`MeMate Terms of Service
1. Introduction
Welcome to MeMate, a mobile application built for employees and independent contractors-whether full-time, part-time,
or casual-who need to track their jobs, manage work hours, submit timesheets or invoices, and handle contracts
digitally. The app enables users to receive job assignments or shifts, confirm them, record time worked, and generate
timesheets or invoices based on their activities.
The MeMate app is free to use, but can only be accessed if a company or employer has invited you to connect. Once
invited, you will be able to receive shift offers or job details directly from the business that employs or engages you.
These Terms of Service ('Agreement') govern your use of the MeMate app ('Service') and are binding upon acceptance.
By downloading, registering, or using the Service, you agree to comply with and be bound by these Terms.
2. Definitions
'MeMate' refers to MeMate Pty Ltd.
'User' means an individual using the app (e.g., employee, contractor).
'Subscriber' refers to the employer or business entity that invites Users.
'Service' refers to the MeMate mobile application and associated tools.
'Data' means all information and records submitted or generated by users.
'Confidential Information' means non-public data shared under these Terms.
3. Use of Software
You are granted a limited, non-transferable, non-exclusive license to use the app.
You must not misuse, modify, reverse engineer, or disrupt the app.
Access is controlled by your employer or the company that invited you.
4. User Obligations
You must:
- Use the app lawfully and responsibly.
- Maintain accurate profile and work data.
- Keep login credentials confidential.
- Immediately report unauthorized access.
5. Data and Privacy
Your data is owned by the Subscriber (employer).
MeMate processes and stores data only for service functionality and support.
Use of the app indicates acceptance of the MeMate Privacy Policy.
6. Confidentiality
You agree not to disclose or misuse confidential business or user information obtained through the Service.
Confidentiality survives termination of this Agreement.MeMate Terms of Service
7. Intellectual Property
MeMate retains ownership of all platform intellectual property.
Users retain ownership of their submitted data.
Users grant MeMate a license to process and store their data for service delivery.
8. Security and Access
You must not:
- Attempt unauthorized access or share credentials.
- Upload malicious content.
- Interfere with the app's functionality or services.
MeMate may restrict access to protect system integrity.
9. Liability Disclaimer
MeMate provides the app 'as is' without warranties.
MeMate is not liable for data loss, service interruptions, or indirect damages.
Your sole remedy for dissatisfaction is to stop using the app.
10. Termination
Access may be terminated by:
- You (by stopping use);
- Your employer (revoking your invitation);
- MeMate (due to breach or misuse).
Access to past data may be revoked upon termination.
11. Our Right to Suspend or Limit Access
We may suspend, limit, or revoke your access to the MeMate app at any time if:
- You are no longer engaged by the business that invited you;
- You breach these Terms or misuse the app;
- Necessary to prevent unlawful activity, fraud, or harm.
12. Changes to These Terms
a) We may update these Terms with 30 days' notice unless urgent legal or operational changes are required.
b) If you do not accept changes, you may stop using the app and request removal of your data.
13. Cancellation
a) Either party may cancel with 30 days' notice.
b) Immediate termination may occur if either party becomes insolvent or materially breaches these Terms.
14. Communication and NoticesMeMate Terms of Service
a) Notices to MeMate: support@memate.com.au.
b) Notices to you: sent to the email listed in your profile.
c) Notices are deemed received 30 minutes after sending unless failed delivery is reported.
15. Dispute Resolution
Disputes should be addressed first through support@memate.com.au.
Unresolved disputes will be settled by arbitration or small claims court.
Disputes must be filed individually (no class actions).
16. General Legal Terms
a) MeMate is not liable for issues caused by external uncontrollable factors.
b) This does not establish an employment or agency relationship.
c) MeMate may transfer its rights without consent.
d) Invalid clauses do not affect the rest of the Terms.
e) These Terms are the entire agreement.
f) Clauses related to confidentiality, IP, liability, and disputes survive termination.
g) Waivers must be in writing.
h) These Terms are governed by the laws of New South Wales, Australia.`)
  }
  }, []);

  useEffect(() => {
    console.log('responseTerms ===> ', responseTerms);
    if (responseTerms != null && responseTerms.status == 'OK') {
      setTerms(responseTerms);
    }
  }, [responseTerms]);

  const onDeclineClick = () => {
    if (from == 'org') {
      navigation.reset({
        index: 0,
        routes: [{name: 'ChooseOrganization'}],
      });
    } else {
      navigation.navigate('SignInWithEmail', {from: 2});
    }
  };

  const onAcceptClick = async () => {
    if (from == 'org') {
      const payload = {
        accept: 'accept',
        id: id,
      };
      dispatch(hitAcceptDeclineTerms(payload));
    } else {
      await AsyncStorage.setItem('isAppTerm', 'true');
      navigation.navigate('RequireDetails');
    }
  };

  useEffect(() => {
    if (responseAcceptDecline != null) {
      // navigation.reset({
      //   index: 0,
      //   routes: [{name: 'BottomBar'}],
      // });
      navigation.goBack();
      // navigation.navigate('BottomBar');
      dispatch(clearAcceptDeclineTerms());
    }
  }, [responseAcceptDecline]);

  return (
    <SafeAreaView style={styles.appDesign}>
      <View style={styles.headerView}>
        <TouchableOpacity onPress={handleClick}>
          <BackIcon />
        </TouchableOpacity>
        <Text style={styles.headerText}>Terms and Conditions</Text>
      </View>
      <ScrollView style={{padding: 16,marginBottom:16}} showsVerticalScrollIndicator={false}>
        {terms != null && (
          from == 'org' ? (
          <RenderHtml
            contentWidth={width}
            source={{html: terms.text}}
            baseStyle={{color: appColors.white}}
          />):
          <Text style={styles.paragraphStyles}>{terms}</Text>
        )}
      </ScrollView>
      {/* <View>
        <Text style={styles.fontColor}>Terms and Conditions</Text>
      </View>
      <Text style={styles.textStyle}>Conditions of use</Text>
      <Text style={styles.paragraphStyles}>
        By using this website, you certify that you have read and reviewed this
        Agreement and that you agree to comply with its terms.If you do not want
        to be bound by the terms of this Agreement, you are advised to stop
        using the website accordingly. [company name] only grants use and access
        of this website, its products, and its services to those who have
        accepted its terms.
      </Text>
      <Text style={styles.textStyle}>Privacy policy</Text>
      <Text style={styles.paragraphStyles}>
        Before you continue using our website,we advise you to read our privacy
        policy [link to privacy policy] regarding our user data collection. It
        will help you better understand our practices.
      </Text> */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.blackBtn}
          onPress={() => onDeclineClick()}>
          <Text
            style={{
              color: appColors.white,
              fontWeight: '600',
              fontSize: 16,
              paddingVertical: 14,
       
            }}>
            Decline
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.whiteBtn}
          onPress={() => onAcceptClick()}>
          <Text
            style={{
              color: appColors.black,
              fontWeight: '600',
              fontSize: 16,
              padding: 14,
              textAlign: 'center',
              flex: 1,
            }}>
            Accept
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

export default TermsAndConditions;

const styles = StyleSheet.create({
  appDesign: {
    backgroundColor: 'black',
    height: '100%',
  },
  backButton: {
    backgroundColor: 'white',
    padding: 32,
    borderRadius: 32,
  },
  headerText: {
    color: 'white',
    fontSize: 16,
    flex: 1,
    textAlign: 'center',
    fontWeight: '700',
    padding: 16,
  },
  headerView: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 8,
  },
  fontColor: {
    color: 'white',
    fontSize: 26,
    padding: 16,
    paddingTop: 16,
    fontWeight: 600,
  },
  textStyle: {
    fontSize: 17,
    padding: 9,
    paddingLeft: 16,
    color: 'white',
    fontWeight: '600',
  },
  whiteBtn: {
    color: appColors.black,
    backgroundColor: appColors.white,
    borderRadius: 24,
    alignItems: 'center',
    flexDirection: 'row',
    paddingHorizontal: 16,
    marginBottom: 16,
    flex: 1,
  },
  blackBtn: {
    color: appColors.white,
    backgroundColor: appColors.black,
    borderRadius: 24,
    alignItems: 'center',
    paddingHorizontal: 16,
    // paddingVertical: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: appColors.white,
    flex:1
  },
  paragraphStyles: {
    color: 'white',
    fontSize: 16,
    lineHeight: 22,
    padding: 8,
    paddingLeft: 16,
    paddingRight: 16,
  },
  inputViewStyle: {
    borderWidth: 1,
    borderRadius: 8,
    borderColor: appColors.borderLightGrey,
    marginTop: 8,
    padding: 2,
    flexDirection: 'row',
    backgroundColor: appColors.inputBackground,
    alignItems: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    paddingHorizontal: 40,
    gap: 10,
  },
});
